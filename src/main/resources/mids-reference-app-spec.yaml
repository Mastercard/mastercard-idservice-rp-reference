openapi: 3.0.3
info:
  title: Mastercard Id Service Rp API
  description: Mastercard ID Service provides the technology platform and operational service to allow the secure storage and transmission of Digital Identity data from the user to the Relying Party having been verified to a required level of assurance by an Identity Verification Provider.
  contact:
    name: API Support
    email: apisupport@mastercard.com
    url: 'https://developer.mastercard.com/support'
  version: '1.0'
servers:
  - url: 'https://api.mastercard.com.au'
    description: Production server (uses live data).
  - url: 'https://sandbox.api.mastercard.com.au'
    description: Sandbox server (testing environment)
tags:
  - name: Claims Sharing
    description: Claims sharing related operations.
  - name: OAuth 2.0 - Access Token
    description: OAuth 2.0 - Access Token
paths:
  '/idservice-rp/claims/{arid}/identity-attributes':
    get:
      summary: Retrieve Identity Attributes
      tags:
        - Claims Sharing
      responses:
        '200':
          $ref: '#/components/responses/ClaimsIdentityAttributesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '404':
          $ref: '#/components/responses/NotFoundError'
      description: |
        Retrieve the Identity attributes from a given ARID.\
        **This API is mandatory.**
      operationId: retrieveClaimsIdentityAttributes
      parameters:
        - $ref: '#/components/parameters/AridParameter'
        - $ref: '#/components/parameters/XEncryptedPayload'
  '/saat-auth/oauth2/token':
    post:
      summary: Authorization server accepts a request, performs client credential validation, and issues an access token to the client application.
      tags:
        - OAuth 2.0 - Access Token
      responses:
        '200':
          $ref: '#/components/responses/AccessTokenSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/UnauthorizedAccessToken'
      description: |
        This API can be used to exchange an auth code (when grant type is
        authorization_code) or a refresh token (when grant type is
        refresh_token) for an access token.   
        **This API is mandatory.**
      operationId: issueAccessToken
      requestBody:
        $ref: '#/components/requestBodies/AccessTokenRequestBody'
components:
  schemas:
    AccessTokenPayload:
      type: object
      properties:
        grant_type:
          type: string
          description: Grant types as described at [Grant
            types](https://oauth.net/2/grant-types). Supported types are
            authorization_code, refresh_token and client_credentials
          example: authorization_code
        code:
          type: string
          description: For grant type authorization_code an auth code must be retrieved
            first from resource owner and provided in request
          example: eyJ4NXQjUzI1NiI6Im9tN0duWHFXLS1OZmJjcnhfT3ppTmdtcjY0WVMyeU0tckJiekhQQ0oyYm8iLCJraWQiOiI4ODc3My1BUElfRW5hYmxlbWVudF9TeW5hcHNlX1BEUCIsImN0eSI6IkpXUyIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJ1c2VyX2NvbnNlbnQiOiJmYWxzZSIsInN1YiI6IjRjNTIwYzg0LTkwMjQtNGI2MC05MDAyLWM3MjU5OTA4YzlmMSIsInNjcCI6ImNvbS5tYXN0ZXJjYXJkLnNwbTpjb250cmFjdC10ZXN0LXNlcnZpY2U6cHJvZ3JhbV9yZWFkOmFnZVVuZGVyKDI5KToxOjIgb2ZmbGluZV9hY2Nlc3Mgb3BlbklkIiwiZ3JwIjpbXSwiaXNzIjoiTUFTVEVSQ0FSRF9TQVMiLCJjb2RlX2NoYWxsZW5nZV9tZXRob2QiOiJTMjU2Iiwibm9uY2UiOiJub25jZS0xIiwidGlkIjoiYXV0aG56MzYwIiwiYXVkIjoiQmlsbFBheSIsIm5iZiI6MTYzNzgzMjIyOCwiZ3JhbnRfdHlwZSI6IkFVVEhPUklaQVRJT05fQ09ERSIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOlwvXC93d3cubXlsaWZlLmNvbSIsImV4cCI6MTYzNzgzMjUyOCwiaWF0IjoxNjM3ODMyMjI4LCJqdGkiOiJiNTAyYTgzOTJlZjZhMTdiYjk3MjE3ZDhkNzYwMjgyNyIsImNvZGVfY2hhbGxlbmdlIjoienkxRGpwbWRMbkVOZVliQVZVZG5qNG1HM21kaUlrNGUtUWRKNWczUUI0byIsImNpZCI6IlVGcVJxTWtqTnViMVBNN01fa1FJanRza1B1MzdkVHVMQm9RRnVJYVUxYTJlNDY1YyJ9.TqcxTN_3DwIaRFpnk9MKCUT1w7_0Oz1zvN5MBXh_Qg7w2bcglXyu1IZ8phzpWg_lE_4Rmwu-jjBaF9kSWPvzJmh_JPe6h9VxEDy0cNA0pTopxIEJi8Dx4eBq5wz54kGX92jvos9t7xeSNnBfnvJr2pxtRFAQpkvAKobUUP4tDKOiHAARJ9pAt6qoqq-60gLzY6MXoeJgzfLpDAdQMWsG1msUpbeg3KTZp6_Sm1TVzfGHxJ0JfIpyV2puGTCiwd5ARiViBFF1UqGyw2iTfL38gyuiEQRPzclfc7XnvBI5iQwslzvlM9Vt2ehoukLJEwd5cGXaC2pdRGVj8okCYrVz2Q
        code_verifier:
          type: string
          description: >-
            Random string generated by client. A code challenge will be derived
            using S256 hash and will be validated against the code challenge
            present in auth code
          example: my-code-verifier-string
        client_assertion:
          type: string
          description: The assertion being used to authenticate the client
          example: >-
            eyJ4NXQjUzI1NiI6IktiMm9obUZKNkhTN2E2cHBhU01TQllSNVc0by1kX24tYjN2c1BvVGtiTm8iLCJraWQiOiJVRnFScU1rak51YjFQTTdNX2tRSWp0c2tQdTM3ZFR1TEJvUUZ1SWFVMWEyZTQ2NWMhNDM0YjRmOTkwYzJjNGY0MWFkYzkwNTNkNTlmNTNkMzIwMDAwMDAwMDAwMDAwMDAwIiwiY3R5IjoiSldTIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJzdWIiOiJub3RfYXZhaWxhYmxlIiwibmJmIjoxNjM3ODMyMTk5LCJleHAiOjE2Mzc4MzMwOTksImlhdCI6MTYzNzgzMjE5OSwianRpIjoiY2JmOWQwOWYzZGRjZTdlM2JlNTZlODUyMDJiYThiYWYifQ.VfHCw49_A6MyAtIG78s3UKaKQPPfe03rFHNHLL-AUr4ko9AMDeAgEUIdTl1P6C1VvsrWSaExT4m3Jdiv1bZ0ZCoSbVQqbx27rMBOHlfFcXkc8vgEd3IydPvcZ2oKrbKtFi04bPs3IuAHPB8WPlNX9w2mzgbgR3e3GhoB3ugj7ex7_X8TYiWZoT2__jcUETsnM98JBusPuiyiyMCqrWYZyuDZXsc964thAEUMq7byUk2x68ql_49atV5VTQ8kY9XG4uutxySo_LOQcgMc8QvaDuVuf8TuhS2pnlIv_XXqWRZLECH_0jEfxbcXRlu0eiITXFO-0lbfcap4z2adBDcAMg
        client_assertion_type:
          type: string
          description: >-
            The format of the assertion as defined by the authorization server.
            The value will be an absolute URI
          example: urn:ietf:params:oauth:client-assertion-type:jwt-bearer
        redirect_uri:
          type: string
          description: >-
            After a user successfully authorizes an application, the
            authorization server will redirect the user back to this URI
          example: https://redirect.me/here
        client_id:
          type: string
          description: >-
            Unique id representing the client. Must be provided only for grant
            type client_credentials
          example: UFqRqMkjNub1PM7M_kQIjtskPu37dTuLBoQFuIaU1a2e465c
        client_secret:
          type: string
          description: Secret only known to the client and authorization server
          example: 434b4f990c2c4f41adc9053d59f53d320000000000000000
        principal_type:
          type: string
          description: >-
            The client principal type is used to identify public or private
            clients. Defauls to private
          example: PUBLIC_OAUTH2_CLIENT_ID
        refresh_token:
          type: string
          description: >-
            It is used by clients to exchange a refresh token for an access
            token when the access token has expired. Must be provided when grant
            type is refresh_token
          example: A JWT token similar to access token
    ClaimsIdentityAttributes:
      required:
        - transactionId
        - verifiableCredential
      type: object
      properties:
        transactionId:
          description: UUID representing the MIDS transaction.
          example: 1ec14310-e85c-11ea-adc1-0242ac120002
          type: string
          minLength: 36
          maxLength: 36
        verifiableCredential:
          $ref: '#/components/schemas/VerifiableCredential'
        fraudDetectionMeta:
          $ref: '#/components/schemas/FraudDetectionResponseMeta'
    VerifiableCredential:
      type: object
      description: An object representing the verified credentials.
      properties:
        '@context':
          type: array
          example:
            - 'https://www.w3.org/2018/credentials/v1'
            - 'https://www.w3.org/2018/credentials/id/v1'
          items:
            type: string
            example: "https://www.w3.org/2018/credentials/v1, https://www.w3.org/2018/credentials/id/v1"
            description: Static Array of Strings from the example.
        type:
          type: array
          example:
            - VerifiableCredential
            - ID
          items:
            type: string
            example: "VerifiableCredential, ID"
            description: Static Array of Strings from the example.
        issuer:
          description: URL of the issuer.
          type: string
          example: 'https://idservice.com/'
        issuanceDate:
          description: Date and Time in a RFC3339 format (<YYYY>-<MM>-<DD>T<HH24>:<MI>:<SS>Z).
          type: string
          format: date-time
          example: '2021-01-01T13:23:33Z'
        credentialSubject:
          $ref: '#/components/schemas/VerifiableCredentialSubject'
        proof:
          $ref: '#/components/schemas/VerifiableCredentialJwsToken'
    VerifiableCredentialJwsToken:
      type: object
      description: An object representing the generated JWS token.
      properties:
        jws:
          description: |
            Generated JWS token of the "credentialSubject" JSON Object,   
            it's signature is generated using a SHA-256 hash of "credentialSubject".
          example: eyJraWQiOiJVTklUX1RFU1RfS0VZX0FMSUFTIiwiYWxnIjoiUlMyNTYifQ..
          type: string
          minLength: 1
    VerifiableCredentialSubject:
      type: object
      description: A serialized object representing a list of credential subjects.
      required:
        - id
      properties:
        id:
          description: The ID for the credential subject.
          example: 0a58579bce2c6c4a9e413acaa7c4d53f9002ee69c736626dc9b48db50c6eb8ac
          type: string
        claimsAttributes:
          description: An object representing the claims data
          type: object
          example:
            legalName:
              assuranceLevel: 1
              lastVerifiedDate: '2021-01-01T13:23:33Z'
              claims:
                legalName: "SMITH,JOHN"
              dataMatch: FULL
            address:
              claims:
                address: "NO_DATA"
              dataMatch: "NOT_AVAILABLE"
          additionalProperties:
            $ref: '#/components/schemas/VerifiableCredentialSubjectClaimValue'
    VerifiableCredentialSubjectClaimValue:
      type: object
      description: An object representing a list of credentials.
      properties:
        assuranceLevel:
          description: The assurance level of the claim.
          example: 1
          type: integer
        verifiedAgainstSource:
          description: >-
            Flag detailing whether the identity was verified against source or
            not.
          example: true
          type: boolean
        lastVerifiedDate:
          description: The last verified date assurance of the claim.
          type: string
          format: date-time
          example: '2021-01-01T13:23:33Z'
        claims:
          type: object
          description: The value of the given claim, can be multiple values for a particular claim.
          example:
            scopeValueName: Value of Scope
        dataMatch:
          description: The data match the status result of the claim.
          type: string
          example: FULL
    FraudDetectionResponseMeta:
      type: object
      description: An object representing the result of the fraud risk assessment.
      properties:
        score:
          $ref: '#/components/schemas/FraudDetectionScore'
    FraudDetectionScore:
      type: object
      description: An object representing the result of the fraud risk assessment.
      properties:
        value:
          type: integer
          example: 0
          description: The score value. This is 0 for a GREEN result.
        band:
          type: string
          example: GREEN
          minLength: 3
          maxLength: 10
          description: The Score Band for the result of the risk assessment. GREEN/YELLOW/RED
        signals:
          type: array
          items:
            type: string
            example: anonymous_ip
            description: The specific signals which caused the above score band.
    AccessTokenResponseDTO:
      required:
        - access_token
        - expires_in
        - scope
        - token_type
      type: object
      description: An object representing the result of the fraud risk assessment.
      properties:
        access_token:
          type: string
          description: The access token string as issued by the authorization server
          example: >-
            eyJ4NXQjUzI1NiI6Im9tN0duWHFXLS1OZmJjcnhfT3ppTmdtcjY0WVMyeU0tckJiekhQQ0oyYm8iLCJraWQiOiI4ODc3My1BUElfRW5hYmxlbWVudF9TeW5hcHNlX1BEUCIsImN0eSI6IkpXUyIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJ1c2VyX2NvbnNlbnQiOiJmYWxzZSIsImF1ZCI6IkJpbGxQYXkiLCJzdWIiOiI0YzUyMGM4NC05MDI0LTRiNjAtOTAwMi1jNzI1OTkwOGM5ZjEiLCJzY3AiOiJjb20ubWFzdGVyY2FyZC5zcG06Y29udHJhY3QtdGVzdC1zZXJ2aWNlOnByb2dyYW1fcmVhZDphZ2VVbmRlcigyOSk6MToyIG9mZmxpbmVfYWNjZXNzIG9wZW5JZCIsIm5iZiI6MTYzNzgzMjIzMiwiZ3JhbnRfdHlwZSI6Ik9BVVRIMl9BQ0NFU1NfVE9LRU4iLCJpc3MiOiJNQVNURVJDQVJEX1NBUyIsImV4cCI6MTYzNzgzMzEzMiwiaWF0IjoxNjM3ODMyMjMyLCJqdGkiOiI2N2EwMGM2ZjE4NzMyNjY2ZWVjMjEzYWEyODc0YjFkYyIsInRpZCI6ImF1dGhuejM2MCIsImNpZCI6IlVGcVJxTWtqTnViMVBNN01fa1FJanRza1B1MzdkVHVMQm9RRnVJYVUxYTJlNDY1YyJ9.XoA4P3-eIlDLFBazW0OHkQm6OKToZCEbpAvc0g0lA2L2Z9OH2EBQ70xIYyV1FPrmhn1exXgERJOdWcXGl7ViCIA61FOuHWmr0AdiezlBdzmO9WIN5_Oy0ObwA2EM_3KsmtkL8vmdZ2o-_cVuz9POOlJt4BJrBDIJPHkhJR564ZzAdHcp7dc9SAbw_ygVrJ7xHyoRg4WUz5epxqvJpEmI3AZVSrv-lr47PZme-8czPYgUyQMeOnMB3yNN25RcBEOsvbZ6SE3bXeXymOLX0UqogWgrbuL1jutwXfo6ET4PEnJ0v52XSXIzgAuYT_Z9yqp5aYGwXOmTikVOlDq5agQ1Pw
          externalDocs:
            url: https://datatracker.ietf.org/doc/html/rfc6749#section-1.4
        token_type:
          type: string
          description: The type of token this is, typically just the string 'bearer'.
          example: bearer
        expires_in:
          type: integer
          description: Duration in seconds the access token will expire after
          format: int64
          example: 300
        scope:
          type: string
          description: >-
            This represents the scope present in auth code shared via request
            payload
          example: >-
            com.mastercard.demo:contract-test-service:program_read:ageUnder(29):1:2
            offline_access
        id_token:
          type: string
          description: >-
            Id token is issued if requested scope contains 'openId' otherwise
            it's empty
          example: >-
            eyJ4NXQjUzI1NiI6Im9tN0duWHFXLS1OZmJjcnhfT3ppTmdtcjY0WVMyeU0tckJiekhQQ0oyYm8iLCJraWQiOiI4ODc3My1BUElfRW5hYmxlbWVudF9TeW5hcHNlX1BEUCIsImN0eSI6IkpXUyIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJzdWIiOiI0YzUyMGM4NC05MDI0LTRiNjAtOTAwMi1jNzI1OTkwOGM5ZjEiLCJzY3AiOiJjb20ubWFzdGVyY2FyZC5zcG06Y29udHJhY3QtdGVzdC1zZXJ2aWNlOnByb2dyYW1fcmVhZDphZ2VVbmRlcigyOSk6MToyIG9mZmxpbmVfYWNjZXNzIG9wZW5JZCIsImdycCI6WyJbXSJdLCJpc3MiOiJNQVNURVJDQVJEX1NBUyIsIm5vbmNlIjoibm9uY2UtMSIsInRpZCI6ImF1dGhuejM2MCIsImF1ZCI6IlVGcVJxTWtqTnViMVBNN01fa1FJanRza1B1MzdkVHVMQm9RRnVJYVUxYTJlNDY1YyIsIm5iZiI6MTYzNzgzMjIzMywiZ3JhbnRfdHlwZSI6Ik9QRU5fSURfVE9LRU4iLCJhenAiOiJVRnFScU1rak51YjFQTTdNX2tRSWp0c2tQdTM3ZFR1TEJvUUZ1SWFVMWEyZTQ2NWMiLCJhdXRoX3RpbWUiOiIxNjM3ODMyMjMzMDExIiwiYWxpYXMiOiI0YzUyMGM4NC05MDI0LTRiNjAtOTAwMi1jNzI1OTkwOGM5ZjEiLCJleHAiOjE2Mzc4MzMxMzMsImlhdCI6MTYzNzgzMjIzMywianRpIjoiNmZlM2Q0NjIwYjhiM2E5NDE0MDc0NDJiNjVkZmNkYWEiLCJjaWQiOiJVRnFScU1rak51YjFQTTdNX2tRSWp0c2tQdTM3ZFR1TEJvUUZ1SWFVMWEyZTQ2NWMifQ.fs4nNNZapRDHdQe5_-uh-L7ttw68ieTu1yF6oLLRaIw5rt4aMXqcqJKf-06fmY46hsLi9uzDg40hNfO1PXyV9K9hO9-BvkWXqJnPDrIau5LA-plpT75GVht2GJK8e0hczxCU-ntw4cgumcMjtevusNEEE-AaPHcIOVbswBV5tj_FYa4jaZxWNgwLnbnT73Qeh82e2rBSz8aFb2dATiO-u4tLnvaJwnmgpVjRlTfc9OzDUv3MCHDkpZWxBtlGlSZgtmuzMcgeeB_x489TgC5KBMj4y0Lat9W6gPD1eTnyowh1ebOeJVgVNTYQPyc86HsOfdKP9tzircNk3R1D2YKJHA
          externalDocs:
            url: https://www.oauth.com/oauth2-servers/openid-connect/id-tokens/
        refresh_token:
          type: string
          description: >-
            Refresh token is issued when requested scope contains
            'offline_access' otherwise it's left empty.
          example: >-
            eyJ4NXQjUzI1NiI6Im9tN0duWHFXLS1OZmJjcnhfT3ppTmdtcjY0WVMyeU0tckJiekhQQ0oyYm8iLCJraWQiOiI4ODc3My1BUElfRW5hYmxlbWVudF9TeW5hcHNlX1BEUCIsImN0eSI6IkpXUyIsInR5cCI6IkpXVCIsImFsZyI6IlJTMjU2In0.eyJ1c2VyX2NvbnNlbnQiOiJmYWxzZSIsInN1YiI6IjRjNTIwYzg0LTkwMjQtNGI2MC05MDAyLWM3MjU5OTA4YzlmMSIsInNjcCI6ImNvbS5tYXN0ZXJjYXJkLnNwbTpjb250cmFjdC10ZXN0LXNlcnZpY2U6cHJvZ3JhbV9yZWFkOmFnZVVuZGVyKDI5KToxOjIgb2ZmbGluZV9hY2Nlc3Mgb3BlbklkIiwiZ3JwIjpbIltdIl0sImlzcyI6Ik1BU1RFUkNBUkRfU0FTIiwibm9uY2UiOiJub25jZS0xIiwidGlkIjoiYXV0aG56MzYwIiwiYXVkIjoiQmlsbFBheSIsIm5iZiI6MTYzNzgzMjIzMywiZ3JhbnRfdHlwZSI6IlJFRlJFU0hfVE9LRU4iLCJhenAiOiJVRnFScU1rak51YjFQTTdNX2tRSWp0c2tQdTM3ZFR1TEJvUUZ1SWFVMWEyZTQ2NWMiLCJhdXRoX3RpbWUiOiIxNjM3ODMyMjMzMDI1IiwiYWxpYXMiOiI0YzUyMGM4NC05MDI0LTRiNjAtOTAwMi1jNzI1OTkwOGM5ZjEiLCJleHAiOjE2Mzk5MDU4MzMsImlhdCI6MTYzNzgzMjIzMywianRpIjoiMTQ2Njg0Y2QwMzUxZjBlZmIyNDNmYzA1Nzg5ZDRiYjgiLCJjaWQiOiJVRnFScU1rak51YjFQTTdNX2tRSWp0c2tQdTM3ZFR1TEJvUUZ1SWFVMWEyZTQ2NWMifQ.gtDW7loKRVjguj-BromsDrDWIuL4A-TrNtc5O9OcjJ5W9B76HdprSxStsEQJwHXovmeQDF8qfqwCBvLKH0CIurRc8Npmx1hcsP5IToiTmVBlNbEfRu9I9f9mcalwZ2DJBfY6bSy8ZZp-_fZ4mwjjqPBfP9CA8eVJnGL5TZ508pUPA7ryON-pxJKHtsRl_4olkkBL5voTBlc4_A9XcvLMPIZoEQ0S65Wk-TgV-qzNbtlfsESRo7NN_pb428CwPAxsoJv9GLhJzHzTYWeiGE67FnC-hasJ_NqcLAb52EeprNsuSGJByxiuN8rlbBeH-7ep1yeljT4u7NRzwnCIv9k0jg
          externalDocs:
            url: https://datatracker.ietf.org/doc/html/rfc6749#section-1.5
        refresh_token_expires_in:
          type: integer
          description: Duration in seconds the refresh token will expire after
          format: int64
          example: 36000
    ErrorResponse:
      required:
        - Errors
      type: object
      description: The error response model used by all the API endpoints.
      properties:
        Errors:
          required:
            - Error
          type: object
          description: The error response model used by all the API endpoints.
          properties:
            Error:
              description: a list of Error objects
              minItems: 1
              type: array
              items:
                type: object
                properties:
                  Source:
                    type: string
                    description: The source of the problem. That is where the error occurred.
                    example: mids
                  ReasonCode:
                    type: string
                    description: 'A code defining the error, as defined in documentation'
                    example: USER_PROFILE_ID_NOT_FOUND
                  Description:
                    type: string
                    description: A description for this specific occurrence of the above Reason Code.
                    example: The provided userProfileId does not exist
                  Recoverable:
                    type: boolean
                    description: Whether or not retrying this request could result in a successful response.
                    example: false
                  Details:
                    type: string
                    description: More details of this specific error. This is an optional field and is sometimes used to give a more comprehensive description of the error that has occurred when required.
                    example: User X was not found
  responses:
    AccessTokenSuccessResponse:
      description: Returned when access token is issued successfully
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessTokenResponseDTO'
    NotFoundError:
      description: Request didn't match an existing resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            NotFoundExample:
              $ref: '#/components/examples/NotFoundExample'
    BadRequestError:
      description: Something was wrong with the request.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            BadRequestExampleUserConsent:
              $ref: '#/components/examples/BadRequestExampleArid'
    BadRequest:
      description: When input validation fails
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            MissingCodeExample:
              $ref: '#/components/examples/BadRequestExample'
    UnauthorizedAccessToken:
      description: >-
        When client is not authorized to access resource or there is an issue
        with token validation
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            InvalidKidExample:
              $ref: '#/components/examples/UnauthorizedExampleToken'
    ClaimsIdentityAttributesSuccessResponse:
      description: Success
      headers:
        X-Transaction-ID:
          schema:
            type: string
          description: A random 128-bit UUID representing the transaction.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ClaimsIdentityAttributes'
          examples:
            ClaimsIdentityAttributesSuccessResponseUnencryptedExample:
              $ref: '#/components/examples/ClaimsIdentityAttributesResponseExample'
            ClaimsIdentityAttributesSuccessResponseEncryptedExample:
              $ref: '#/components/examples/EncryptedPayloadNoPDSExample'
  requestBodies:
    AccessTokenRequestBody:
      description: Form parameters required to exchange access token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessTokenPayload'
      required: true
  examples:
    EncryptedPayloadNoPDSExample:
      value:
        encryptedData: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyf
    NotFoundExample:
      value:
        Errors:
          Error:
            - Source: mids
              ReasonCode: NOT_FOUND
              Description: ARID or consumer key ID could not be found.
              Recoverable: false
              Details: null
    BadRequestExampleArid:
      value:
        Errors:
          Error:
            - Source: mids
              ReasonCode: VALIDATION_ERROR
              Description: Unexpected value 'null' for ARID.
              Recoverable: false
              Details: null
    BadRequestExample:
      value:
        Errors:
          Error:
            - Source: saat
              ReasonCode: invalid_code_verifier
              Description: Missing 'code_verifier' in request payload
              Recoverable: false
              Details: >-
                A code_verifier must be passed to be validated against
                code_challenge present in auth code
    UnauthorizedExampleToken:
      value:
        Errors:
          Error:
            - Source: saat
              ReasonCode: invalid_kid_in_token_header
              Description: Invalid claim 'kid' in token header
              Recoverable: false
              Details: >-
                Authorization code issued by auth server must contain claim
                'kid' otherwise request is considered unauthorized
        error: invalid_kid_in_token_header
        errorDescription: Invalid claim 'kid' in token header
    ClaimsIdentityAttributesResponseExample:
      value:
        transactionId: 1ec14310-e85c-11ea-adc1-0242ac120002
        verifiableCredential:
          '@context':
            - https://www.w3.org/2018/credentials/v1
            - https://www.w3.org/2018/credentials/id/v1
          type:
            - VerifiableCredential
            - ID
          issuer: https://idservice.com/
          issuanceDate: '2021-01-01T13:23:33Z'
          credentialSubject:
            id: 0a58579bce2c6c4a9e413acaa7c4d53f9002ee69c736626dc9b48db50c6eb8ac
            claimsAttributes:
              legalName:
                assuranceLevel: 1
                lastVerifiedDate: '2021-01-01T13:23:33Z'
                claims:
                  legalName: SMITH,JOHN
                dataMatch: FULL
              address:
                claims:
                  address: NO_DATA
              dataMatch: NOT_AVAILABLE
          proof:
            jws: eyJraWQiOiJVTklUX1RFU1RfS0VZX0FMSUFTIiwiYWxnIjoiUlMyNTYifQ..
        fraudDetectionMeta:
          score:
            value: 0
            band: GREEN
            signals:
              - anonymous_ip
  parameters:
    AridParameter:
      name: arid
      in: path
      description: "UUID representing the ARID"
      example: df52649e-4096-456a-bca0-751ee470009f
      required: true
      schema:
        maxLength: 36
        minLength: 36
        type: string
        pattern: ^[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}$
    XEncryptedPayload:
      in: header
      name: X-Encrypted-Payload
      example: true
      description: |
        Indicator that request is encrypted or to indicate that client is able to receive a encrypted response. If not set, payload will treated as plaintext.
      schema:
        type: boolean